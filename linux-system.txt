********************************************************************************
* I v a n   I v a n o v                                                        *
*                                                                              *
* L I N U X   S Y S T E M   A D M I N I S T R A T I O N                        *
*                                                                              *
* A   b o o k                                                                  *
********************************************************************************

********************************************************************************
* 1 .   M a n i p u l a t i n g   f i l e s   a n d   d i r e c t o r i e s    *
********************************************************************************

********************************************************************************
* 1 . 1 .   W i l d c a r d s                                                  *
********************************************************************************

     ******************************
     * Description
     ******************************

     The shell provides special characters to help you rapidly specify groups of
filenames. These special characters are called "wildcards". Using wildcards
(also known as "globbing") allows you to select filenames based on patterns of
characters.

     ***************************************************************************
     * Wildcard          * Matches
     ***************************************************************************

     *                   Any characters.
     ?                   Any single character.
     [characters]        Any character that is a member of the set "characters".
     [!characters]       Any character that is not a member of the set
                         "characters".
     [[:class:]]         Any character that is a member of the specified
                         "class".

     ***************************************************************************
     * Class             * Matches
     ***************************************************************************

     [:alnum:]           Any alphanumeric character.
     [:alpha:]           Any alphabetic character.
     [:digit:]           Any numeral.
     [:lower:]           Any lowercase letter.
     [:upper:]           Any uppercase letter.

     ***************************************************************************
     * Pattern           * Matches
     ***************************************************************************

     *                   All files.
     g*                  Any file beginning with "g".
     b*.txt              Any file beginning with "b" followed by any characters
                         and ending with ".txt".
     data???             Any file beginning with "data" followed by exactly
                         three characters.
     [abc]*              Any file beginning with either "a", "b", or "c".
     backup.[0-9][0-9]   Any file beginning with "backup." followed by exactly
                         two numerals.
     [[:upper:]]*        Any file beginning with an uppercase letter.
     [![:digit:]]*       Any file not beginning with a numeral.
     *[[:lower:]123]     Any file ending with a lowercase letter or the numerals
                         "1", "2", or "3".

********************************************************************************
* 1 . 2 .   c p   -   c o p y   f i l e s   a n d   d i r e c t o r i e s      *
********************************************************************************

     ******************************
     * Description
     ******************************

     Copy source to destination, or source(s) to directory.

     ******************************
     * Useful options
     ******************************
     
     -a, --archive -> same as "-dR --preserve=all". Copy the files and
directories and all of their attributes, including ownerships and permissions.
Normally, copies take on the default attributes of the user performing the copy.

     --attributes-only -> do not copy the file data, just the attributes

     -d -> same as "--no-dereference --preserve=links"

     --help -> display this help and exit

     -i, --interactive -> prompt before overwrite (overrides a previous "-n"
option)

     -L, --dereference -> always follow symbolic links into source

     -l, --link -> hard link files instead of copying

     -n, --no-clobber -> do not overwrite an existing file (overrides a previous
"-i" option)

     --no-preserve=... -> don't preserve the specified attributes

     -P, --no-dereference -> never follow symbolic links into source

     --preserve=... -> preserve the specified attributes (default:
"mode,ownership,timestamps"), if possible additional attributes: "context",
"links", "xattr", "all"

     -p -> same as "--preserve=mode,ownership,timestamps"

     -R, -r, --recursive -> copy directories recursively

     -s, --symbolic-link -> make symbolic links instead of copying

     -u, --update -> copy only when the source file is newer than the
destination file or when the destination file is missing

     --version -> output version information and exit

     -v, --verbose -> explainto what is being done

     -x, --one-file-system -> stay on this file system

     ******************************
     * See also
     ******************************

     ~$ info coreutils 'cp invocation'

     ******************************
     * Usage
     ******************************

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # Make copy of "file1" to "file2". If "fil2" exists, it is overwritten with
the contents of "file1". If "file2" does not exist, it is created.
     ~$ cp file1 file2

     # Same as above, except that if "file2" exists, the user is prompted before
it is overwritten.
     ~$ cp -i file1 file2
     # cp: overwrite ‘file2’? y

     # Make directory "dir1" into the current working directory.
     ~$ mkdir dir1
     # Copy "file1" and "file2" into "dir1". "dir1" must already exist.
     ~$ cp file1 file2 dir1/

     # Make directory "dir2" into the current working directory.
     ~$ mkdir dir2
     # Using a wildcard, all the files into "dir1" are copied into "dir2".
"dir2" must already exist.
     ~$ cp dir1/* dir2/

     # Copy directory "dir1" (and its contents) to directory "dir2".
     ~$ cp -r dir1/ dir2/

     # If directory "dir3" does not exist, it is created and will contain the
same contents as directory "dir1".
     ~$ cp -r dir1/ dir3

********************************************************************************
* 1 . 3 .   m k d i r   -   m a k e   d i r e c t o r i e s                    *
********************************************************************************

     ******************************
     * Description
     ******************************

     Create the directory(ies), if they do not already exist.

     ******************************
     * Useful options
     ******************************

     --help -> display this help and exit

     -m, --mode=... -> set file mode (as into "chmod")

     -p, --parents -> no error if existing, make parent directories as needed

     --version -> output version information and exit

     -v, --verbose -> print a message for each created directory

     ******************************
     * See also
     ******************************

     ~$ info coreutils 'mkdir invocation'

     ~$ man 2 mkdir

     ******************************
     * Usage
     ******************************

     # Make directory "dir1" into the current working directory.
     ~$ mkdir dir1

     # Make directories "dir2", "dir3" and "dir4" into the current working
directory.
     ~$ mkdir dir2 dir3 dir4

     # Make directory "dir5" into the current working directory and make
directory "subdir1" into directory "dir5".
     ~$ mkdir -p dir5/subdir1

     # Make directory "dir6" with mode "0444" into the current working
directory.
     ~$ mkdir -m 0444 dir6
     # Or:
     ~$ mkdir --mode=0444 dir6

********************************************************************************
* 1 . 4 .   m v   -   m o v e   ( r e n a m e )   f i l e s                    *
********************************************************************************

     ******************************
     * Description
     ******************************

     Rename source to destination, or move source(s) to directory.

     ******************************
     * Useful options
     ******************************

     -f, --force -> do not prompt before overwriting

     --help -> display this help and exit

     -i, --interactive -> prompt before overwrite

     -n, --no-clobber -> do not overwrite an existing file

     If you specify more than one of "-i", "-f", "-n", only the final one takes
effect.

     -u, --update -> move  only when the source file is newer than the
destination file or when the destination file is missing

     --version -> output version information and exit

     -v, --verbose -> explainto what is being done

     ******************************
     * See also
     ******************************

     ~$ info coreutils 'mv invocation'

     ~$ man 2 rename

     ******************************
     * Usage
     ******************************

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # If "file2" does not exist, rename "file1" to "file2". If "file2" exists,
it is overwritten with the contents of "file1". In either case, "file1" ceases
to exist.
     ~$ mv file1 file2

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # Same as above, except that if "file2" exists, the user is prompted before
it is overwritten.
     ~ $ mv -i file1 file2
     # mv: overwrite ‘file2’? y

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # Make directory "dir1" into the current working directory.
     ~$ mkdir dir1
     # Move "file1" and "file2" into "dir1". "dir1" must already exist.
     ~$ mv file1 file2 dir1/

     # Make directory "dir2" into the current working directory.
     ~$ mkdir dir2
     # Using a wildcard, all the files into "dir1" are moved into "dir2". "dir2"
must already exist.
     ~$ mv dir1/* dir2/

     # Create file "file3" into "dir1".
     ~$ touch dir1/file3
     # Move directory "dir1" (and its contents) to directory "dir2".
     ~$ mv dir1/ dir2/

     # If directory "dir3" does not exist, rename "dir2" to "dir3".
     ~$ mv dir2/ dir3

********************************************************************************
* 1 . 5 .   r m   -   r e m o v e   f i l e s   o r   d i r e c t o r i e s    *
********************************************************************************

     ******************************
     * Description
     ******************************

     Remove each specified file. By default, it does not remove directories.

     ******************************
     * Useful options
     ******************************

     -d, --dir -> remove empty directories

     -f, --force -> ignore nonexistent files and arguments, never prompt

     --help -> display this help and exit

     --interactive=... -> prompt "never", "once" ("-I"), or "always" ("-i").
Default:  "always"

     -i -> prompt before every removal

     -I -> prompt  once  before  removing more than three files, or when
removing recursively. Less intrusive than -i, while still giving protection
against most mistakes
     --no-preserve-root -> do not treat "/" specially

     --one-file-system -> when  removing a hierarchy recursively, skip any
directory that is on a file system different from that of the corresponding
command line argument

     --preserve-root -> do not remove "/" (default)

     -r, -R, --recursive ->  remove directories and their contents recursively

     --version -> output version information and exit

     -v, --verbose -> explain what is being done

     ******************************
     * See also
     ******************************

     ~$ info coreutils 'rm invocation'

     ~$ man 2 unlink
     ~$ man shred
     ~$ man unlink

     ******************************
     * Usage
     ******************************

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # Remove "file1".
     ~$ rm file1

     # Create files "file1" and "file2" into the current working directory.
     ~$ touch file1 file2
     # Before removing any files beginning with "file", prompt the user for
confirmation.
     ~$ rm -i file*
     # rm: remove regular empty file ‘file1’? y
     # rm: remove regular empty file ‘file2’? y

     # Create 10 files from "file1" to "file10" into the current working
directory.
     ~$ touch file{1..10}
     # Remove any files beginning with "file" and prompt only once.
     ~$ rm -I file*
     # rm: remove all arguments? y

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # Make directory "dir1" into the current working directory.
     ~$ mkdir dir1
     # Create file "file2" into "dir1".
     ~$ touch dir1/file2
     # Remove "file1" and "dir1" and its contents.
     ~$ rm -r file1 dir1/

     # Create file "file1" into the current working directory.
     ~$ touch file1
     # Same as above, except that if either "file1" or "dir1" does not exist,
"rm" will continue silently.
     ~$ rm -rf file1 dir1

     # Remove a file whose name starts with a "-", for example "-foo".
     ~$ rm -- -foo
     # Or:
     ~$ rm ./-foo

********************************************************************************
